# Development Rules

Always start coding sessions with **بسم الله الرحمن الرحیم**.

## Code Modification Rules

1. **No Unsolicited Refactoring**
   - Do not modify or refactor working code unless explicitly requested
   - Keep existing code structure intact if it's functioning correctly
   - Focus only on fixing actual bugs and issues

2. **Feature Changes**
   - Only implement new features when specifically asked
   - Do not add "nice to have" enhancements without explicit request
   - Keep changes minimal and focused on the requested task

3. **Code Style**
   - Maintain the existing code style
   - Do not change formatting or structure for aesthetic reasons
   - Follow the project's established patterns

4. **Dependencies**
   - Do not update or add new dependencies without explicit approval
   - Keep using existing libraries and versions that work

5. **Documentation**
   - Only update documentation for new changes
   - Do not modify existing documentation unless specifically asked
   - After each successful task, update docs/Progress.md to reflect the changes

## When Making Changes

1. **Scope**
   - Stay strictly within the scope of the requested change
   - If additional changes might be beneficial, suggest them but don't implement without approval

2. **Testing**
   - Test only the modified components
   - Do not add new tests for existing functionality unless requested

3. **Error Handling**
   - Maintain existing error handling patterns
   - Do not enhance error handling without explicit request

4. **Documentation Review**
   - Always read the docs directory before starting a task to understand context
   - Pay special attention to docs/Progress.md to understand current project status
   - After completing a task, update docs/Progress.md to reflect the progress

## Cascade and Sonnet Specific Rules

1. **Type Safety and Shared Types**
   - Ensure all code is fully type-safe using TypeScript
   - Use the shared type definitions from the wa-shared module
   - Maintain consistent type definitions across frontend and backend

2. **Import Path Conventions**
   - Avoid relative imports that traverse up multiple directories
   - Follow the established import patterns in the existing codebase

3. **Prisma ORM Usage**
   - Use Prisma client for all database operations
   - Don't reference or use any TypeORM entities or methods
   - Follow the Prisma schema definitions for data structure

4. **React Query Implementation**
   - Use React Query for data fetching and state management in the frontend
   - Follow established patterns for query keys and mutation functions
   - Ensure proper error handling and loading states

5. **WebSocket Event Handling**
   - Use the defined WebSocket event types consistently
   - Follow the established pattern for real-time updates
   - Ensure proper reconnection logic and error handling

6. **Progress Tracking**
   - Update the Progress.md file after each significant change
   - Mark completed items with the ✅ status indicator
   - Add new tasks to the appropriate priority section

7. **Modular Component Structure**
   - Keep components focused on a single responsibility
   - Maintain separation between UI components and business logic
   - Follow the established component structure in the codebase